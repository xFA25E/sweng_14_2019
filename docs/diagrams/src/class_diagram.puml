@startuml
title Class Diagram

class Sorgente {
    - id: integer [1]
    - timer: Timer [1]
    - previsioni24H: Evento [*] {ordered}
    - mysqlConn: Connection  [0..1]
    + GeneraPrevisioni(): ListaEventi {Query}
    - CalcolaDifferenze()
    + InviaPrevisioni(ListaEventi) {Query}
}
note bottom of Sorgente: Il timer ha una durata\ndi 4h e ogni volta che termina\nviene chiamato il metodo "GeneraPrevisioni()"

class Evento<<dataType>> {
    + id: integer [1]
    + CAP: String  [1]
    + testo: String [0..1]
    + tipo: String [0..1]
    + istanteTemporale: DataTime [1]
    + Gravità: integer [1]
}

enum StatoEvento {
    Previsto
    In Corso
    Accaduto
    Rientrato
}

class ListaEventi <<dataType>>
note top of ListaEventi:"DBMS MySQL"

ListaEventi "*" --> Evento: Insieme di
StatoEvento "1 " -> Evento: È
Sorgente .> ListaEventi

class Utente {
    - CAPpreferiti: ListaCAP [0..1]
    - mysqlConn: Connection  [0..1]
    + SetCapPreferiti(ListaCAP)
    + GetAllarmiInEvidenza(): ListaEventi {query} {ordered}
    + EffettuaRicerca(FiltroRicerca)
}
ListaEventi <. Utente

class ListaCAP <<dataType>> {
    + CAP: String [*]
}

class FiltroRicerca {
    - ListaCAP: ListaCAP [1]
    - Tipo:String [0..1]
    - IstanteTemporale: DateTime [1]
    + SetListaCAP(ListaCAP)
    + GeneraListaCapFromArea(regione:string, provincia:string, città:string)
}

class GestioneNotifica {
    - utente: Utente
    - timer: Timer
    + ControllaPrevisioni()
    - NotificaEventi(ListaEventi)
}
note right of GestioneNotifica: Il timer ha una durata di 10sec\ned ogni volta che termina, viene\neffettuata una query sulle nuove previsioni\nnei cap preferiti dall'utente

Utente <. GestioneNotifica

'Layout only
hide empty members
skinparam classAttributeIconSize 0
Utente --[hidden]> ListaCAP
Utente --[hidden]> FiltroRicerca
@enduml