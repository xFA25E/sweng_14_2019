@startuml
title Class Diagram
package source {
    interface IGestorePrevisioni<<interface>> {
        - previsioni24H: ListaEventi {ordered}
        + GetPrevisioni24H() : ListaEventi
        + SetPrevisioni24H(ListaEventi)
        + GeneraPrevisioni(): ListaEventi {Query}
    }

    class GestorePrevisioni {
        - previsioni24H: ListaEventi {ordered}
        - timer: Timer [1]
        + GetPrevisioni24H() : ListaEventi
        + SetPrevisioni24H(ListaEventi)
        + GeneraPrevisioni(): ListaEventi {Query}
        - CalcolaDifferenze()
    }

    class Sorgente {
        - id: integer [1]
        - timer: Timer [1]
        + InviaPrevisioni(ListaEventi)
    }
    note bottom of Sorgente: Il timer ha una durata di 4h e ogni volta che termina\nviene chiamato il metodo "InviaPrevisioni(previsioni24H)".
    note bottom of GestorePrevisioni: Il timer ha una durata\ndi 5sec e ogni volta che termina\nviene chiamato il metodo "GeneraPrevisioni()".\nSe ci sono degli eventi in corso, vengono\nsubito inviati al Server attraverso il metodo\n"InviaPrevisioni(EventiInCorso)" di Sorgente.

    IGestorePrevisioni "0..1" <-> "1" Sorgente : \t\t\t
    IGestorePrevisioni <|.. GestorePrevisioni
}

package server{
    interface "Remote (from RMI)" as Remote <<interface>>

    interface IServer<<interface>> {
        + StoreEventi(ListaEventi, Sorgente)
        + GetEventi(FiltroRicerca): ListaEventi {query} {ordered}
    }

    class Server {
        - sqlConn: Connection  [0..1]
        + StoreEventi(ListaEventi, Sorgente)
        + GetEventi(FiltroRicerca): ListaEventi {query} {ordered}
    }

    class "UnicastRemoteObject\n(from rmi.server)" as UnicastRemoteObject

    Remote <|-- IServer
    IServer <|.. Server
    Server -|> UnicastRemoteObject
}

Sorgente .> IServer

package user {
    class Utente {
        - CAPpreferiti: ListaCAP [0..1]
        + SetCapPreferiti(ListaCAP)
        + GetAllarmiInEvidenza(): ListaEventi {query} {ordered}
        + EffettuaRicerca(FiltroRicerca)
    }

    interface IGestoreNotifica {
        + NotificaEventi(ListaEventi)
    }

    class GestoreNotifica {
        - timer: Timer
        + ControllaPrevisioni()
        - NotificaEventi(ListaEventi)
    }
    note bottom of GestoreNotifica: Il timer ha una durata di 10sec\ned ogni volta che termina, viene\neffettuata una query sulle nuove previsioni\nnei cap preferiti dall'utente

    Utente "1" <-> "1" IGestoreNotifica :\t
    IGestoreNotifica <|.. GestoreNotifica
}

Utente ..> IServer

package common {
    enum StatoEvento {
        Previsto
        In Corso
        Accaduto
        Rientrato
    }

    class Evento<<dataType>> {
        + id: integer [1]
        + CAP: String  [1]
        + testo: String [0..1]
        + tipo: String [0..1]
        + istanteTemporale: DataTime [1]
        + Gravità: integer [1]
    }

    class ListaEventi <<dataType>>

    interface List<<interface>>

    ListaEventi ..|> List: \t
    StatoEvento "1" <- Evento: \tÈ\t
    Evento " * " <-*  ListaEventi: Composta da

    class FiltroRicerca {
        - ListaCAP: ListaCAP [1]
        - Tipo:String [0..1]
        - IstanteTemporale: DateTime [1]
        + SetListaCAP(ListaCAP)
        + GeneraListaCapFromArea(regione:string, provincia:string, città:string)
    }

    class ListaCAP <<dataType>> {
        + CAP: String [*]
    }

    interface Set<<interface>>

    ListaCAP .|> Set
    FiltroRicerca .> ListaCAP
}

'Layout only
hide empty members
skinparam classAttributeIconSize 0
ListaEventi -[hidden] FiltroRicerca
GestorePrevisioni -[hidden]-- StatoEvento
Server .[hidden].> ListaEventi
Utente .[hidden].> FiltroRicerca
@enduml