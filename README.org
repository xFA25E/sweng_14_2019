#+TITLE: Protezione Civile
* Da fare
** quando il client fa il poll, bisogna aggirnari gli stati
#+BEGIN_SRC
if expected_at < now
  if status = "expected"
    status = "canceled"
  else if status = "ongoing"
    status = "occured"
#+END_SRC
** Modalita' generazione previsioni (class diag)
   Gestore previsioni ogni 5 secondi generera' previsioni per le prossime 24
   ore. Sorgente, ogni 4 ore, inviera' semplicemente queste previsioni
   eliminando previsioni passate.
** Modalita' notifiche utente (class diag)
   Utente si terra' una copia della lista delle previsioni. Facendo il polling,
   inviera' una notifica all'utente se trova che ci siano degli aggiornamenti.
** Modalita' di generazione delle previsioni in corsa (class diag)
   Quando viene invocato GeneraPrevisioni, se trova delle previsioni che sono in
   corso, li invia subito, eliminando dalle previsioni24h gli eventi che lo
   riguardavano.
** Struttura dati per ListaEventi
   Magari usare TreeSet (o SortedSet) per la ListaEventi
** Cambiare nome in class diagram
   GeneraListaCapFromArea : s/From/By/
** Organizzazioni dei packages nel progetto
   Create package for utils like FiltroRicerca and ListaEventi
** Modificare sequence diagrams
   Cap preferiti deve essere modificato con getNotifiche (cap preferiti)
   Mettere un loop su notifiche
** Modificare use case diagrams
   eliminare Applicazioni_Mobile

   GestionePrevisioni - lo fa Sorgente
** Modificare activity diagriam
   Eliminare la freccia che fa in alto

   Se un evento e' in corso, deve inviarlo subito
** Add runtime checks for SearchFilter caps in Server
   It should check strings for this [0-9]{5} pattern and include only conforming
   strings.
** Look for java Map Entry APIs and maybe use generic Map and Set everywhere
   Or maybe use SortedSet (or TreeSet) and find a way to sort it by expectedAt
   property
** Rewrite generateCapList
   Remove edge cases
** Decouple SearchFilter and CapListGenerator
