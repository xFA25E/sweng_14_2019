package it.polimi.project14.common;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class SearchFilter implements java.io.Serializable {
    // Autogenerated to check
    private static final long serialVersionUID = 1L;

    private Set<String> capList;
    private String kind;
    private LocalDateTime expectedAt;

    static HashMap<String, HashMap<String, HashSet<String>>> caps;

    static {
        BufferedReader csvReader = null;
        try {
            csvReader = new BufferedReader(new FileReader("data/provincia_comune_cap.csv"));

            try {
                String row;
                caps = new HashMap<>();
                while ((row = csvReader.readLine()) != null) {
                    String[] data = row.split(",");

                    String
                        province = data[0],
                        municipality = data[1],
                        cap = data[2];

                    HashMap<String, HashSet<String>> municipalityMap = caps.get(province);
                    if (municipalityMap == null) {
                        municipalityMap = new HashMap<>();
                    }

                    HashSet<String> capSet = municipalityMap.get(municipality);
                    if (capSet == null) {
                        capSet = new HashSet<>();
                    }

                    capSet.add(cap);
                    municipalityMap.put(municipality, capSet);
                    caps.put(province, municipalityMap);

                }
            } catch (NumberFormatException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

        } catch (FileNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();

        } finally {
            if (csvReader != null) {
                try {
                    csvReader.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    }

    public void setCapList(Set<String> capList) {
        this.capList = capList;
    }

    public Set<String> getCapList() {
        return this.capList;
    }

    public void setKind(String kind) {
        this.kind = kind;
    }

    public String getKind() {
        return this.kind;
    }

    public void setExpectedAt(LocalDateTime expectedAt) {
        this.expectedAt = expectedAt;
    }

    public LocalDateTime getExpectedAt() {
        return this.expectedAt;
    }

    public void generateCapList(String province, String municipality) {
        if (capList == null) {
            capList = new HashSet<>();
        }
        capList.clear();

        if (province != null && municipality != null) {
            capList.addAll(caps.get(province).get(municipality));
        } else if (province != null && municipality == null) {
            HashMap<String, HashSet<String>> mMap = caps.get(province);
            if (mMap != null) {
                for (HashSet<String> cList : mMap.values()) {
                    capList.addAll(cList);
                }
            }
        } else if (province == null && municipality != null) {
            for (HashMap<String, HashSet<String>> mMap : caps.values()) {
                HashSet<String> cList = mMap.get(municipality);
                if (cList != null) {
                    capList.addAll(cList);
                }
            }
        } else {
            for (HashMap<String, HashSet<String>> mMap : caps.values()) {
                for (HashSet<String> cList : mMap.values()) {
                    capList.addAll(cList);
                }
            }
        }
    }
}
