package it.polimi.project14.common;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class SearchFilter implements java.io.Serializable {
    // Autogenerated to check
    private static final long serialVersionUID = 1L;

    private Set<String> capList;
    private String kind;
    private LocalDateTime expectedAt;

    static HashMap<String, HashMap<String, HashSet<String>>> caps;

    static {
        try (BufferedReader csvReader
             = new BufferedReader(new FileReader("data/provincia_comune_cap.csv"))) {

            String row;
            caps = new HashMap<>();
            while ((row = csvReader.readLine()) != null) {
                String[] data = row.split(",");

                String
                    province = data[0],
                    municipality = data[1],
                    cap = data[2];

                if (!caps.containsKey(province)) {
                    caps.put(province, new HashMap<>());
                }

                if (!caps.get(province).containsKey(municipality)) {
                    caps.get(province).put(municipality, new HashSet<>());
                }

                caps.get(province).get(municipality).add(cap);
            }
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void setCapList(Set<String> capList) {
        this.capList = capList;
    }

    public Set<String> getCapList() {
        return this.capList;
    }

    public void setKind(String kind) {
        this.kind = kind;
    }

    public String getKind() {
        return this.kind;
    }

    public void setExpectedAt(LocalDateTime expectedAt) {
        this.expectedAt = expectedAt;
    }

    public LocalDateTime getExpectedAt() {
        return this.expectedAt;
    }

    public void generateCapList(String province, String municipality) {
        if (capList == null) {
            capList = new HashSet<>();
        }
        capList.clear();

        if (province != null && municipality != null) {
            capList.addAll(caps.get(province).get(municipality));
        } else if (province != null && municipality == null) {
            HashMap<String, HashSet<String>> mMap = caps.get(province);
            if (mMap != null) {
                for (HashSet<String> cList : mMap.values()) {
                    capList.addAll(cList);
                }
            }
        } else if (province == null && municipality != null) {
            for (HashMap<String, HashSet<String>> mMap : caps.values()) {
                HashSet<String> cList = mMap.get(municipality);
                if (cList != null) {
                    capList.addAll(cList);
                }
            }
        } else {
            for (HashMap<String, HashSet<String>> mMap : caps.values()) {
                for (HashSet<String> cList : mMap.values()) {
                    capList.addAll(cList);
                }
            }
        }
    }
}
